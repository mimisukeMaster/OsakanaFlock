//
// Postprocessing compute shader for the hand mesh pipeline
//

#pragma kernel spad_kernel
#pragma kernel bbox_kernel
#pragma kernel crop_kernel
#pragma kernel post_kernel

#include "HandRegion.hlsl"
#include "LowPassFilter.hlsl"
#include "Misc.hlsl"
#include "Packages/jp.keijiro.mediapipe.blazepalm/Shader/Struct.hlsl"

//
// Kernel 0: Input image scaling and padding (letterboxing)
//

uint _spad_width;
float2 _spad_scale;

sampler2D _spad_input;

RWStructuredBuffer<float> _spad_output;

[numthreads(8, 8, 1)]
void spad_kernel(uint2 id : SV_DispatchThreadID)
{
    if (any(id > _spad_width)) return;

    // UV coordinates
    float2 uv = (id + 0.5) / _spad_width;
    uv.y = 1 - uv.y;

    // Scaling
    uv = (uv - 0.5) * _spad_scale + 0.5;

    // UV gradients
    float2 duv_dx = float2(+1.0 / _spad_width * _spad_scale.x, 0);
    float2 duv_dy = float2(0, -1.0 / _spad_width * _spad_scale.y);

    // Texture sample
    float3 rgb = tex2Dgrad(_spad_input, uv, duv_dx, duv_dy).rgb * 2 - 1;

    // Bounding
    rgb *= all(uv > 0) && all (uv < 1);

    // Tensor element output
    uint offs = (id.y * _spad_width + id.x) * 3;
    _spad_output[offs + 0] = rgb.r;
    _spad_output[offs + 1] = rgb.g;
    _spad_output[offs + 2] = rgb.b;
}

//
// Kernel 1: Hand region bounding box update
//

float _bbox_dt;

StructuredBuffer<PalmDetection> _bbox_palm;
ByteAddressBuffer _bbox_count;

RWStructuredBuffer<HandRegion> _bbox_region;

[numthreads(1, 1, 1)]
void bbox_kernel(uint id : SV_DispatchThreadID)
{
    uint entry_count = _bbox_count.Load(0);
    if (entry_count == 0) return;

    // Input from the palm detection model
    const PalmDetection palm = _bbox_palm[0];

    // Palm region size (squarified and enlarged bounding box)
    float size = max(palm.extent.x, palm.extent.y) * 3;

    // Palm angle
    const float2 up = palm.keyPoints[3] - palm.keyPoints[0];
    float angle = atan2(up.y, up.x) - PI / 2;

    // Hand region structure. We're going to update this.
    HandRegion region = _bbox_region[0];

    // Low pass filter parameters and input vector
    const float3 lpf_params = float3(2, 1.5f, _bbox_dt);
    const float4 box = float4(palm.center, size, angle);
    region.dBox = lpf_Step_dx(box, region.box, region.dBox, lpf_params);
    region.box = lpf_Step_x(box, region.box, region.dBox, lpf_params);

    // Region crop matrix update
    float4x4 m1 = makeTranslationMatrix(region.box.xy - region.box.z / 2);
    float4x4 m2 = makeScalingMatrix(region.box.z);
    float4x4 m3 = makeTranslationMatrix(0.5);
    float4x4 m4 = makeRotationMatrix(region.box.w);
    float4x4 m5 = makeTranslationMatrix(-0.5 + float2(0, 0.15));
    region.cropMatrix = mul(mul(mul(mul(m1, m2), m3), m4), m5);

    // Compute buffer update
    _bbox_region[0] = region;
}

//
// Kernel 2: Hand region cropping
//

#define CROP_IMAGE_SIZE 224

sampler2D _crop_input;
StructuredBuffer<HandRegion> _crop_region;

RWStructuredBuffer<float> _crop_output;

[numthreads(8, 8, 1)]
void crop_kernel(uint2 id : SV_DispatchThreadID)
{
    float4x4 xform = _crop_region[0].cropMatrix;

    // UV coordinates
    float2 uv = (id + 0.5) / CROP_IMAGE_SIZE;
    uv.y = 1 - uv.y;
    uv = mul(xform, float4(uv, 0, 1)).xy;

    // De-letterboxing
    uv = (uv - 0.5) * _spad_scale + 0.5;

    // UV gradients
    float2 duv_dx = mul(xform, float4(1.0 / CROP_IMAGE_SIZE, 0, 0, 0)).xy;
    float2 duv_dy = mul(xform, float4(0, -1.0 / CROP_IMAGE_SIZE, 0, 0)).xy;

    // Texture sample
    float3 rgb = tex2Dgrad(_crop_input, uv, duv_dx, duv_dy).rgb;

    // Tensor element output
    uint offs = (id.y * CROP_IMAGE_SIZE + id.x) * 3;
    _crop_output[offs + 0] = rgb.r;
    _crop_output[offs + 1] = rgb.g;
    _crop_output[offs + 2] = rgb.b;
}

//
// Kernel 3: Key point postprocess
//

#define POST_KEYPOINT_COUNT 21

float _post_dt;
float _post_scale;

StructuredBuffer<float4> _post_input;
StructuredBuffer<HandRegion> _post_region;

RWStructuredBuffer<float4> _post_output;

[numthreads(POST_KEYPOINT_COUNT, 1, 1)]
void post_kernel(uint id : SV_DispatchThreadID)
{
    HandRegion region = _post_region[0];

    float3 x = _post_input[id + 1].xyz;
    float3 p_x = _post_output[id].xyz;
    float3 p_dx = _post_output[id + POST_KEYPOINT_COUNT].xyz;

    x = mul(region.cropMatrix, float4(x, 1)).xyz;
    x.xy = (x.xy - 0.5) * _post_scale;

    float3 lpf_params = float3(30, 1.5, _post_dt);
    float3 dx = lpf_Step_dx(x, p_x, p_dx, lpf_params);
    x = lpf_Step_x(x, p_x, dx, lpf_params);

    _post_output[id] = float4(x, 1);
    _post_output[id + POST_KEYPOINT_COUNT] = float4(dx, 1);
}
